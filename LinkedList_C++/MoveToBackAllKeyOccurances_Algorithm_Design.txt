MoveToBack():
description: given a key k, move all of its occurances to the end of the list

tests:
1.
list = [1, 1, 3, 4, 5], key = 1
// list = [3, 4, 5, 1, 1]

2.
list = [1, 2, 3, 2, 4, 1], key = 1
// list = [2, 3, 2, 4, 1, 1]

3.
list = [1, 2, 3, 1, 2, 4, 1, 7, 1, 8, 1, 1], key = 1,
// list = [2, 3, 2, 4, 7, 8, 1, 1, 1, 1, 1, 1]


steps:
-get the length of the linked list
-counter = 0
-ptr = head
-prev = null, temp = null
-while counter < length:
 -if ptr->data == key:
  -temp = ptr
  -ptr = ptr->next
  -tail->next = temp
  -temp->next = null
  -if temp == head:
   -head = ptr
  -else:
   -prev->next = ptr
  -tail = temp
 -else:
  -prev = ptr
  -ptr = ptr->next
 -++counter